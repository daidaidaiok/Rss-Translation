<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Wed, 26 Jun 2024 00:11:55 GMT</lastBuildDate>
    <item>
      <title>[媒体] 网站：www.hollywoodreporter.com</title>
      <link>https://t.me/hn_summary/96660</link>
      <description><![CDATA[为名人身体部位投保的奇怪世界
标题：为名人身体部位投保的奇怪世界
网站：www.hollywoodreporter.com

名人通常会为自己的身体部位投保巨额保险，但这些故事中有许多要么是宣传噱头，要么是彻头彻尾的捏造。例如，尼克·卡农 (Nick Cannon) 为他的睾丸投保了 1000 万美元，这是真的，但是为了推广他的睾丸护理产品。同样，America Ferrera 的 1000 万美元微笑保险是 Aquafresh 的促销噱头。自 1940 年代以来，伦敦劳合社一直是名人身体部位的首选保险公司，从贝蒂·格拉布尔的腿到布鲁斯·斯普林斯汀的声音，无所不包。然而，许多索赔，如泰勒·斯威夫特 4000 万美元的腿和詹妮弗·洛佩兹 2700 万美元的臀部，仍未得到证实或被揭穿。文章幽默地总结道，虽然保险提供保护，但它不能覆盖一切。]]></description>
      <guid>https://t.me/hn_summary/96660</guid>
      <pubDate>Wed, 26 Jun 2024 00:11:55 GMT</pubDate>
    </item>
    <item>
      <title>问 HN：为什么 GeoCities 有如此疯狂的设计美学？</title>
      <link>https://t.me/hn_summary/96659</link>
      <description><![CDATA[问 HN：为什么 GeoCities 有如此疯狂的设计美学？
GeoCities 狂野的设计美学源自互联网早期，当时网页设计还是一个新领域。用户通常几乎没有接受过正式的设计培训，但他们可以自由地使用基本的 HTML 创建个人页面。这导致了色彩、字体和动画 GIF 的鲜明而混乱的混合。这种美学反映了当时的 DIY 精神和网络出版的新颖性。这是一个实验和自我表达的时期，由于缺乏既定的设计规范，因此产生了一种独特但混乱的视觉风格，至今仍让人怀念。]]></description>
      <guid>https://t.me/hn_summary/96659</guid>
      <pubDate>Tue, 25 Jun 2024 23:51:44 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] JEP 401 向 Java 平台引入了值类，从而允许使用 o [...]</title>
      <link>https://t.me/hn_summary/96658</link>
      <description><![CDATA[JEP 401：值类和对象（预览）
JEP 401 向 Java 平台引入了值类，使类实例仅具有 final 字段而没有对象标识。此预览功能允许开发人员选择一种模型，其中对象仅通过其字段值来区分，类似于区分原始值的方式。目标包括将流行的 JDK 类（如 Integer）迁移到此模型并提高 JVM 效率。值得注意的是，它并不旨在引入结构功能或更改原始类型行为。其动机是简化域值表示，减少 == 运算符的混淆，并通过消除不必要的对象标识来提高运行时性能。这种方法允许开发人员选择哪些对象需要标识，从而提供类和原始值的优势。 （根据 28% 的故事文本进行总结。）]]></description>
      <guid>https://t.me/hn_summary/96658</guid>
      <pubDate>Tue, 25 Jun 2024 23:38:30 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] Glissotar 最初采用热带硬木制成，现在经过创新重新 [...]</title>
      <link>https://t.me/hn_summary/96657</link>
      <description><![CDATA[连续音高管乐器
Glissotar 最初由热带硬木制成，现在经过创新重新设计，打造出耐用的 3D 打印版本。这一现代版本保留了该乐器独特的连续音​​高功能，同时提供明亮、共鸣的音调。转向 3D 打印不仅确保了耐用性，还使 Glissotar 更容易被世界各地的音乐家使用。这种传统工艺与尖端技术的融合凸显了该乐器的多功能性和未来乐器设计进步的潜力。]]></description>
      <guid>https://t.me/hn_summary/96657</guid>
      <pubDate>Tue, 25 Jun 2024 23:30:24 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 事情发生了奇怪的转折，一名新泽西男子 Edward Kang 飞往佛罗里达州袭击 [...]</title>
      <link>https://t.me/hn_summary/96656</link>
      <description><![CDATA[男子因网络游戏纠纷飞往佛罗里达州袭击另一名玩家
当局报道称，事情发生了奇怪的转折，一名新泽西男子 Edward Kang 因网络游戏纠纷飞往佛罗里达州袭击另一名玩家。20 岁的 Kang 被指控二级谋杀未遂和戴面具持械入室盗窃。该事件源于中世纪奇幻 MMORPG 游戏 ArcheAge 中的一场冲突。Kang 从纽瓦克前往杰克逊维尔，买了一把锤子，并在费南迪纳比奇的家中袭击了受害者。受害者头部受伤，没有生命危险，在医院接受了缝合钉治疗。Kang 声称受害者是“网上的坏人”，受害者的继父一直将他控制住，直到警察赶到。警长比尔·利珀 (Bill Leeper) 表示，“有些事情是无法弥补的”，凸显了这起犯罪的不寻常性质。Kang 被拘留，不得保释。]]></description>
      <guid>https://t.me/hn_summary/96656</guid>
      <pubDate>Tue, 25 Jun 2024 23:26:19 GMT</pubDate>
    </item>
    <item>
      <title>尼古拉斯·卡利尼 (Nicholas Carlini) 在最近的一篇博客文章中回应了教授的批评。</title>
      <link>https://t.me/hn_summary/96655</link>
      <description><![CDATA[我为何攻击
在最近的一篇博客文章中，尼古拉斯·卡里尼回应了赵本教授对他研究和揭露安全漏洞动机的批评。卡里尼坦率地承认，他的主要动力是智力挑战和解决难题的兴奋，而不是“做好事”的基本愿望。他认为，人们可以享受撰写攻击论文的乐趣，同时仍然关心他人。卡里尼解释了漏洞的范围，从容易修补到基本上无法修补，以及这种范围如何影响披露的时间和方式。他分享了案例研究，包括伯克利招生系统中一个严重但可修补的漏洞，他选择不立即披露以尽量减少伤害。这种细致入微的方法强调了他的信念，即负责任的披露取决于漏洞的性质及其潜在影响。（基于 43% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/96655</guid>
      <pubDate>Tue, 25 Jun 2024 23:18:13 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 并发编程中的原子操作是有益的，因为它们通常转化为[...]</title>
      <link>https://t.me/hn_summary/96654</link>
      <description><![CDATA[Go 中的原子操作组合
并发编程中的原子操作非常有用，因为它们通常转换为单处理器指令并且不需要锁定，从而确保跨 goroutine 的可预测结果。但是，误用可能会导致问题。例如，在单个 goroutine 中增加计数器可保证最终值为 200，但在并发环境中，竞争可能会导致不可预测的结果，例如 183。正确使用原子操作（例如 counter.Add(1)）可确保最终值得到保证。但是，由于序列依赖性，组合原子操作（如条件增量）并不能保证一致的结果。尽管原子操作很简单，但应谨慎使用，而互斥锁虽然不那么吸引人，但通常会导致更少的并发错误。本文中的交互式示例由 Codapi（一种用于嵌入实时代码片段的工具）提供支持。

争议：原子操作的误用可能导致不可预测的结果。
独特/巧妙：用于嵌入实时代码片段的 Codapi 工具。]]></description>
      <guid>https://t.me/hn_summary/96654</guid>
      <pubDate>Tue, 25 Jun 2024 23:16:10 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在本期《潜在空间播客》中，主持人 Alessio 和 Swyx 深入探讨了 [...]</title>
      <link>https://t.me/hn_summary/96653</link>
      <description><![CDATA[使用 NSFW 聊天机器人模拟人类
在本期 Latent Space Podcast 中，主持人 Alessio 和 Swyx 与嘉宾 Jesse Silver 一起深入探讨了 NSFW AI 聊天机器人这个小众但蓬勃发展的世界。Jesse 和他的联合创始人 Adam Scrivener 运营着一个 SaaS 平台，该平台帮助 OnlyFans 等粉丝平台上的创作者构建 AI 聊天机器人来与粉丝互动。这些聊天机器人有助于自动化与粉丝聊天这一耗时且通常耗费精力的任务，而这可以占到创作者收入的 80%。对话涵盖了模拟人类互动的技术挑战、商业模式以及这些 AI 工具背后的心理学。值得注意的是，尽管用户知道自己正在与人工智能互动，但他们往往选择暂时搁置怀疑，与这些聊天机器人进行深入互动。本集还涉及 NSFW 人工智能应用程序的争议性，以及许多创作者通过这些自动互动赚取可观收入的令人惊讶的事实。（基于 24% 的故事文本总结。）]]></description>
      <guid>https://t.me/hn_summary/96653</guid>
      <pubDate>Tue, 25 Jun 2024 23:09:04 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 研究人员开发出了一种突破性的方法，可以更有效地运行人工智能语言模型 [...]</title>
      <link>https://t.me/hn_summary/96652</link>
      <description><![CDATA[研究人员通过消除法学硕士中的矩阵乘法颠覆了人工智能现状
研究人员开发了一种突破性的方法，通过消除矩阵乘法（神经网络操作的核心组件）来更有效地运行人工智能语言模型。加州大学圣克鲁斯分校、加州大学戴维斯分校、LuxiTech 和苏州大学的预印本论文详细介绍了这项创新，它可以显著降低人工智能系统对环境的影响和运营成本。矩阵乘法对当前的神经网络至关重要，GPU 对其进行了高度优化，这推动了 Nvidia 的市场主导地位。研究人员创建了一个没有矩阵乘法的 27 亿参数模型，实现了与传统模型相当的性能。他们演示了一个 13 亿参数模型，该模型在定制 FPGA 芯片上以每秒 23.8 个 token 的速度运行，功耗仅为 13 瓦，这意味着与传统模型相比，功耗可能降低 38 倍。这项尚未经过同行评审的技术挑战了矩阵乘法对于高性能语言模型至关重要的信念，有可能使 AI 更易于访问和可持续。该研究以 BitNet 的“1 位”转换器技术为基础，但更进一步，甚至在注意力机制中也消除了矩阵乘法。]]></description>
      <guid>https://t.me/hn_summary/96652</guid>
      <pubDate>Tue, 25 Jun 2024 23:07:00 GMT</pubDate>
    </item>
    <item>
      <title>网站：matt.might.net</title>
      <link>https://t.me/hn_summary/96651</link>
      <description><![CDATA[Continuations by Example
标题：Continuations by Example
网站：matt.might.net

Continuations 是编程中功能强大的构造，表示计算中的剩余步骤。使用一流的 Continuations，可以实现非确定性选择过程 amb，该过程选择确保未来断言为真的值。例如，在 Scheme 中，amb 可以找到满足勾股定理的直角三角形的维度。此功能扩展到编写 SAT 求解宏，该宏绑定变量以满足逻辑公式。

可以使用 Scheme 中的 call/cc 捕获和操作延续，从而实现复杂的控制流，如无限循环或异常处理。它们还支持对数据结构进行高效迭代，而无需中间分配，如生成器中所示。此外，延续促进了协作式多线程，其中线程手动放弃控制。

一个独特的方面是 amb 和 assert 使用的“失败堆栈”机制来管理失败的断言，展示了巧妙使用延续​​来解决回溯和搜索问题。]]></description>
      <guid>https://t.me/hn_summary/96651</guid>
      <pubDate>Tue, 25 Jun 2024 22:39:47 GMT</pubDate>
    </item>
    </channel>
</rss>