<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>HN 摘要</title>
    <link>https://tg.i-c-a.su</link>
    <description>由大型语言模型编写的热门 Hacker News 故事的自动摘要。</description>
    <lastBuildDate>Tue, 02 Jul 2024 21:06:10 GMT</lastBuildDate>
    <item>
      <title>[媒体] 很抱歉，我无法提供彭博社内容的摘要，因为它似乎[...]</title>
      <link>https://t.me/hn_summary/97765</link>
      <description><![CDATA[作为 AI 协议的一部分，苹果有望获得 OpenAI 董事会观察员角色
很抱歉，我无法提供彭博社内容摘要，因为似乎由于检测到您的网络存在异常活动，导致对该文章的访问受到限制。您可能想尝试直接访问该网站并完成 CAPTCHA 以查看内容。如果您可以提供更多详细信息或其他来源，我很乐意帮助您总结！]]></description>
      <guid>https://t.me/hn_summary/97765</guid>
      <pubDate>Tue, 02 Jul 2024 21:06:10 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] Figma 最近撤下了其新的 AI 工具 Make Designs，因为它因通用性而受到批评 [...]</title>
      <link>https://t.me/hn_summary/97764</link>
      <description><![CDATA[Figma 撤下 AI 工具，因被批评抄袭苹果设计
Figma 最近撤下了其新的 AI 工具 Make Designs，此前该工具因生成的设计与苹果的 iOS 天气应用非常相似而受到批评。首席执行官 Dylan Field 负责推动团队按时完成任务，而首席技术官 Kris Rasmussen 澄清说，Figma 并未训练所使用的 AI 模型，这些模型来自 OpenAI 和亚马逊。这引发了人们的担忧，这些第三方模型可能已经接受了苹果设计的训练。Figma 计划改进其设计系统，以防止此类问题并确保未来的 AI 工具符合质量标准。这场争议凸显了公司在将 AI 集成到创意工具中时面临的更广泛挑战，类似于 Adob​​e 和 Meta 遇到的问题。]]></description>
      <guid>https://t.me/hn_summary/97764</guid>
      <pubDate>Tue, 02 Jul 2024 21:05:07 GMT</pubDate>
    </item>
    <item>
      <title>Mutahunter 是一个开源的、与语言无关的突变测试工具，它利用大型局域网 [...]</title>
      <link>https://t.me/hn_summary/97763</link>
      <description><![CDATA[显示 HN：Mutahunter – LLM 支持所有主要语言的变异测试
Mutahunter 是一种开源、与语言无关的变异测试工具，它利用大型语言模型 (LLM) 来增强自动化软件测试。它由 CodeIntegrity 开发，旨在通过将上下文感知故障注入代码库来提高测试套件的稳健性，超越传统的基于抽象语法树 (AST) 的方法。这种 AI 驱动的方法可确保全面有效的测试，紧密模仿真实漏洞。Mutahunter 支持多种编程语言并提供详细的变异覆盖率报告。它可以与各种 CI/CD 平台集成，并支持自托管版本以解决隐私问题。该项目鼓励贡献并提供大量安装和使用文档。]]></description>
      <guid>https://t.me/hn_summary/97763</guid>
      <pubDate>Tue, 02 Jul 2024 20:59:01 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 网站：dodov.dev</title>
      <link>https://t.me/hn_summary/97762</link>
      <description><![CDATA[CSS 可能让你入狱 - 浏览器渲染器现在被视为罪犯
标题：CSS 可能让你入狱 - 浏览器渲染器现在被视为罪犯
网站：dodov.dev

在网页上显示法律文件（如条款和条件或隐私政策）时，使用 CSS 计数器和有序列表等前端最佳实践可能会带来重大法律风险。这些文档依赖分层编号作为唯一标识符，任何渲染问题（如由浏览器不一致或回归引起的问题）都可能导致文本在法律上不正确。作者强调了一个令人惊讶的问题，即 Chromium 回归导致编号错误，并强调浏览器无法保证正确呈现列表。建议的解决方案是对数字进行硬编码，并使用律师使用的富文本编辑器来确保准确性。这种方法可以避免浏览器渲染问题导致的潜在法律麻烦。]]></description>
      <guid>https://t.me/hn_summary/97762</guid>
      <pubDate>Tue, 02 Jul 2024 20:52:54 GMT</pubDate>
    </item>
    <item>
      <title>L1sp.org 是一种访问 Common Lisp 文档的便捷重定向服务。</title>
      <link>https://t.me/hn_summary/97761</link>
      <description><![CDATA[Common Lisp 文档
L1sp.org 是一种方便的重定向服务，用于访问 Common Lisp 文档。通过使用此服务，用户可以快速找到各种 Common Lisp 符号和库的文档。例如，您可以搜索与 Alexandria、ASDF、CCL、CFFI 等流行库相关的符号。此网站简化了查找特定文档的过程，使开发人员更容易找到所需的信息。如果您有任何问题或意见，可以通过电子邮件联系我们。此服务因其在浏览 Common Lisp 资源方面的简单性和效率而脱颖而出。]]></description>
      <guid>https://t.me/hn_summary/97761</guid>
      <pubDate>Tue, 02 Jul 2024 20:43:46 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 在这篇文章中，我探索使用规划编程解决数学问题。</title>
      <link>https://t.me/hn_summary/97760</link>
      <description><![CDATA[使用规划器编程解决数学问题
在这篇文章中，我探讨了如何使用规划器编程解决数学问题。这个问题是在 Math Stack Exchange 上发现的，涉及确定仅使用“全选”、“复制”和“粘贴”操作达到至少 100,000 个“a”的最小步骤数。虽然初始解决方案是解析的，但使用广度优先搜索 (BFS) 的 C++ 程序提供了保证最短的解决方案。但是，由于破坏了单调性，BFS 通过融合选择和复制步骤来阻止优化。

然后我使用 Picat 规划语言解决了这个问题，它通过定义初始状态、操作和目标来简化复杂问题。这种方法允许优雅的解决方案和优化，在 42 个步骤中实现目标。有趣的是，虽然找到一条精确到 100,000 个“a”的路径很简单，但由于路径长度超过 9000 步，因此达到 100,001 个“a”却很有挑战性。

Planning 的灵活性还允许探索变化，例如添加“删除”操作，这将达到 100,001 个“a”简化为 47 步。这展示了规划解决和试验复杂问题的潜力。

Planning 真的很酷。如果您在网上阅读本文，可以在此处订阅。每周更新一次。我的主要网站在这里。]]></description>
      <guid>https://t.me/hn_summary/97760</guid>
      <pubDate>Tue, 02 Jul 2024 20:27:37 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 北卡罗来纳州立大学 (NCSU) 的工程师们开发出了一种突破性的 [...]</title>
      <link>https://t.me/hn_summary/97759</link>
      <description><![CDATA[新型“玻璃凝胶”材料异常坚固、有弹性且粘性强
北卡罗来纳州立大学 (NCSU) 的工程师开发出一种名为“玻璃凝胶”的突破性材料，它独特地结合了玻璃聚合物的强度和硬度以及凝胶的柔韧性和可拉伸性。这些材料可以拉伸至其原始长度的五倍而不会断裂，并且在加热时会恢复到其原始形状。此外，它们具有高度的粘性和自修复性。制造过程涉及将玻璃聚合物的液体前体分子与离子液体结合，离子液体充当溶剂，赋予材料双重特性。令人惊讶的是，尽管玻璃凝胶的重量超过 54% 是液体，但它表现出令人印象深刻的机械性能，类似于聚乙烯等热塑性塑料。该项研究发表在《自然》杂志上，强调了其多种应用的潜力，尽管具体用途尚未确定。]]></description>
      <guid>https://t.me/hn_summary/97759</guid>
      <pubDate>Tue, 02 Jul 2024 20:26:30 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 网站：community.sonarsource.com</title>
      <link>https://t.me/hn_summary/97758</link>
      <description><![CDATA[Sonar 正在毁掉我的工作，让我陷入绝望
标题：Sonar 正在毁掉我的工作，让我陷入绝望
网站：community.sonarsource.com

作者表达了对代码质量工具 SonarQube 的不满，因为它给他们的工作带来了重大问题。他们认为，根本问题是管理层过度依赖 SonarQube 指标而不了解背景。该工具缺乏清晰度，无法区分关键问题和小问题，这加剧了问题。例如，作者的代码遵循军事标准，但却引发了数千个轻微违规行为，导致管理人员不必要的恐慌。这种情况迫使作者为了安抚管理层而牺牲代码的可读性。作者呼吁在 SonarQube 内提供更好的沟通工具，并为管理人员提供解释结果的指导。争议在于对 SonarQube 的有效性及其对开发人员与管理层关系的影响的批评。]]></description>
      <guid>https://t.me/hn_summary/97758</guid>
      <pubDate>Tue, 02 Jul 2024 20:23:25 GMT</pubDate>
    </item>
    <item>
      <title>谷歌在其 2024 年环境报告中透露，该公司的碳排放量将同比增长近 50% [...]</title>
      <link>https://t.me/hn_summary/97757</link>
      <description><![CDATA[谷歌碳排放量因人工智能能源需求激增近 50%
谷歌在其 2024 年环境报告中透露，碳排放量较 2019 年激增近 50%，标志着其在 2030 年实现净零排放的目标遭遇重大挫折。该公司将这一激增归因于数据中心能源消耗和供应链排放的增加，而这些增加是由人工智能 (AI) 的快速发展和需求推动的。值得注意的是，谷歌数据中心的用电量在 2023 年增长了 17%。虽然可再生能源有望在满足人工智能能源需求方面发挥关键作用，但立即实施面临着挑战，例如建设必要电力线所需的时间。尽管存在这些障碍，谷歌仍致力于通过模型优化和高效的基础设施来减轻人工智能对环境的影响。有趣的是，谷歌数据中心的能源效率比普通数据中心高出 1.8 倍。微软也报告称，由于人工智能需求，排放量也出现了类似的增加。]]></description>
      <guid>https://t.me/hn_summary/97757</guid>
      <pubDate>Tue, 02 Jul 2024 20:18:19 GMT</pubDate>
    </item>
    <item>
      <title>[媒体] 我注意到编程语言中一个有趣的趋势，我称之为“双相程序设计[...]</title>
      <link>https://t.me/hn_summary/97756</link>
      <description><![CDATA[探索双相编程：一种新的语言设计方法
我注意到编程语言中有一个有趣的趋势，我称之为“双相编程”。这种方法允许使用相同的语法来表达在两个不同阶段或环境中执行的计算，同时保持一致的行为。示例包括 Zig、React Server Components (RSC) 和 Winglang。

Zig：Zig 的“comptime”功能允许函数在编译时运行，从而无需引入新语法即可简化元编程。与 Rust 或 C++ 不同，Zig 避免了函数着色和复杂的模板。

React Server Components：RSC 允许 React 组件指定服务器端或客户端渲染，从而优化性能并减少发送到浏览器的代码。如果引擎经过优化且可调试，这种灵活性将非常强大。

Winglang：Winglang 专为云应用程序设计，使用“预检”和“飞行中”阶段来管理基础设施和应用程序逻辑。预检代码在编译时运行，而飞行中代码在部署后运行，两者使用相同的语法。

争议：“双相编程”一词是自创的，可能未被广泛接受。

独特/巧妙：Zig 的编译时间避免了其他编译​​时系统的陷阱，而 Winglang 的阶段区分简化了云基础设施管理。

TL;DR：双相编程允许相同的语法在不同阶段运行，解决 Zig、React 和 Winglang 中的不同问题。（基于 95% 的故事文本的摘要。）]]></description>
      <guid>https://t.me/hn_summary/97756</guid>
      <pubDate>Tue, 02 Jul 2024 20:16:14 GMT</pubDate>
    </item>
    </channel>
</rss>